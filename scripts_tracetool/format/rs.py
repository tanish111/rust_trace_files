# -*- coding: utf-8 -*-

"""
trace/generated-tracers.h
"""

__author__     = "Lluís Vilanova <vilanova@ac.upc.edu>"
__copyright__  = "Copyright 2012-2017, Lluís Vilanova <vilanova@ac.upc.edu>"
__license__    = "GPL version 2 or (at your option) any later version"

__maintainer__ = "Stefan Hajnoczi"
__email__      = "stefanha@redhat.com"


from tracetool import out


def generate(events, backend, group):
    out('use std::ffi::c_char;')

    out('#[inline(always)]',
        'fn trace_event_get_state_dynamic_by_id(_id: u16) -> bool {',
        '    unsafe { (trace_events_enabled_count != 0) && (_id != 0) }',
        '}',
        '',
        'extern "C" {',
        '    static mut trace_events_enabled_count: u32;',
        '}',)

    out('/* This file is autogenerated by tracetool, do not edit. */',
        '')
    
    out('extern "C" {')

    for e in events:
	    out('    static mut %s: u16;' % e.api(e.QEMU_DSTATE))
	    out('    fn _simple_%(api)s(%(args)s);',
            api=e.api(),
            args=e.rust_args)	
    out('}')

    # static state
    for e in events:
        if 'disable' in e.properties:
            enabled = 0
        else:
            enabled = 1
        if "tcg-exec" in e.properties:
            # a single define for the two "sub-events"
            out('const _TRACE_%(name)s_ENABLED: bool = %(enabled)s;',
                name=e.original.name.upper(),
				enabled="true" if (enabled==1) else "false")
        out('const _TRACE_%s_ENABLED: bool = %s;' % (e.name.upper(),"true" if ( enabled==1) else "false" ))

    backend.generate_begin(events, group)

    for e in events:
        # tracer without checks
        out('',
			'#[inline(always)]',
            'fn %(api)s(%(args)s)',
            '{',
            api=e.api(e.QEMU_TRACE_NOCHECK),
            args=e.rust_args)

        if "disable" not in e.properties:
            backend.generate(e, group)

        out('}')

        cond = "(_TRACE_%s_ENABLED) && unsafe {trace_event_get_state_dynamic_by_id(_TRACE_%s_DSTATE)}" % (e.name.upper(),e.name.upper())

        out('',
			'#[inline(always)]',
            'pub fn %(api)s(%(args)s)',
            '{',
            api=e.api(),
            args=e.rust_args)
        
        if "disable" not in e.properties:
            backend.generate_unconditional(e, group)

        out('    if %(cond)s {',
            '        %(api_nocheck)s(%(names)s);',
            '    }',
            '}',
            api_nocheck=e.api(e.QEMU_TRACE_NOCHECK),
            names=", ".join(e.args.rust_names()),
            cond=cond)
    backend.generate_end(events, group)

